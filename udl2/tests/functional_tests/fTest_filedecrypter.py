import unittest
import csv
import os
import shutil
from filedecrypter import file_decrypter
from udl2.defaults import UDL2_DEFAULT_CONFIG_PATH_FILE
import imp
import gnupg


class TestFileDecrypter(unittest.TestCase):

    def setUp(self):
        try:
            config_path = dict(os.environ)['UDL2_CONF']
        except Exception:
            config_path = UDL2_DEFAULT_CONFIG_PATH_FILE
        udl2_conf = imp.load_source('udl2_conf', config_path)
        from udl2_conf import udl2_conf
        self.conf = udl2_conf
        # test source files
        self.test_source_file_1 = self.conf['zones']['datafiles'] + 'test_source_file_tar_gzipped.tar.gz.gpg'
        self.test_source_file_2 = self.conf['zones']['datafiles'] + 'test_corrupted_source_file_tar_gzipped.tar.gz.gpg'
        # temp directory for testing decrypter
        self.decrypter_test_dir = self.conf['zones']['tests'] + 'decrypter_test/'
        if not os.path.exists(self.decrypter_test_dir):
            os.makedirs(self.decrypter_test_dir)
        # test files in tests zone
        self.test_valid_file = self.decrypter_test_dir + 'test_source_file_tar_gzipped.tar.gz.gpg'
        self.test_invalid_file = self.decrypter_test_dir + 'test_non_existing_file_tar_gzipped.tar.gz.gpg'
        self.test_corrupted_file = self.decrypter_test_dir + 'test_corrupted_source_file_tar_gzipped.tar.gz.gpg'
        # copy files to tests zone
        shutil.copyfile(self.test_source_file_1, self.test_valid_file)
        shutil.copyfile(self.test_source_file_2, self.test_corrupted_file)
        # set the gpg key home
        self.gpg_test_home = self.conf['zones']['datafiles'] + 'keys'

    def test_decrypter_for_valid_file(self):
        assert os.path.isfile(self.test_valid_file)
        decrypted_file = None
        status = None
        status, decrypted_file = file_decrypter.decrypt_file(self.test_valid_file, self.decrypter_test_dir, 'sbac udl2', self.gpg_test_home)
        assert os.path.isfile(decrypted_file)
        assert status.ok is True
        assert status.trust_level is 4
        assert status.trust_text == 'TRUST_ULTIMATE'
        assert status.username == 'Autogenerated Key <ca_user@ca.com>'
        assert status.fingerprint == '398AE2A8E54D810502E4B115DD87CFFF75C7BEC2'

    def test_decrypter_for_invalid_file(self):
        assert not os.path.isfile(self.test_invalid_file)
        decrypted_file = None
        status = None
        try:
            status, decrypted_file = file_decrypter.decrypt_file(self.test_invalid_file, self.decrypter_test_dir, 'sbac udl2', self.gpg_test_home)
        except Exception as e:
            print('Exception -- ', e)
        assert decrypted_file is None

    def test_decrypter_for_corrupted_file(self):
        assert os.path.isfile(self.test_corrupted_file)
        decrypted_file = None
        status = None
        try:
            status, decrypted_file = file_decrypter.decrypt_file(self.test_corrupted_file, self.decrypter_test_dir, 'sbac udl2', self.gpg_test_home)
        except Exception as e:
            print('Exception -- ', e)
        assert decrypted_file is None
        assert status is None

    def test_decrypter_with_wrong_passphrase(self):
        assert os.path.isfile(self.test_valid_file)
        decrypted_file = None
        status = None
        try:
            status, decrypted_file = file_decrypter.decrypt_file(self.test_valid_file, self.decrypter_test_dir, 'wrong passphrase', self.gpg_test_home)
        except Exception as e:
            print('Exception -- ', e)
        assert decrypted_file is None
        assert status is None

    def tearDown(self):
        if os.path.exists(self.decrypter_test_dir):
            shutil.rmtree(self.decrypter_test_dir)
