[app:main]
auth.idp.metadata = ../../resource/idp_metadata.xml
auth.policy.cookie_name = edware
auth.policy.hashalg = sha512
auth.policy.http_only = True
auth.policy.secret = edware_secret
auth.policy.timeout = 1200
auth.saml.idp_server_login_url = http://edwappsrv4.poc.dum.edwdc.net:18080/opensso/SSORedirect/metaAlias/idp
auth.saml.idp_server_logout_url = http://edwappsrv4.poc.dum.edwdc.net:18080/opensso/IDPSloRedirect/metaAlias/idp
auth.saml.issuer_name = http://localhost:6543/sp.xml
auth.saml.name_qualifier = http://edwappsrv4.poc.dum.edwdc.net:18080/opensso
auth.session.timeout = 1200
auth.skip.verify = False
auth.state.secret = long_secret_for_redirects1111234
batch.user.session.timeout = 300000
cache.expire = 3600
cache.lock_dir = /tmp/memcache
cache.public.data.expire = 10
cache.public.filtered_data.expire = 15552000
cache.public.shortlived.expire = 10
cache.regions = public.data, public.filtered_data, public.shortlived, session
cache.session.expire = 1200
cache.type = memory
disable.context.security = True
disable_stack_trace = False
edware.db.cat.schema_name = edware_sds_1_6
edware.db.cat.state_code = NY
edware.db.cat.url = postgresql+psycopg2://edware:edware2013@edwdbsrv1.poc.dum.edwdc.net:5432/edware_functional_tests
edware.db.dog.schema_name = edware_sds_1_6_dog
edware.db.dog.state_code = CA
edware.db.dog.url = postgresql+psycopg2://edware:edware2013@edwdbsrv1.poc.dum.edwdc.net:5432/edware_functional_tests
edware.db.echo = False
edware_rep.db.cat.state_code = NY
edware_stats.db.schema_name = edware_sds_1_6
edware_stats.db.url = postgresql+psycopg2://edware:edware2013@edwdbsrv1.poc.dum.edwdc.net:5432/edware_functional_tests_stats
extract.available_grades = 3,4,5,6,7,8,11
extract.celery.BROKER_URL = amqp://edware:edware1234@edwappsrv1.poc.dum.edwdc.net/services
extract.celery.CELERYD_CONCURRENCY = 20
extract.celery.CELERY_DEFAULT_EXCHANGE_TYPE = direct
extract.celery.CELERY_DEFAULT_QUEUE = extract
extract.celery.CELERY_DEFAULT_ROUTING_KEY = extract
extract.celery.CELERY_IMPORTS = ('edextract.tasks.extract',)
extract.celery.CELERY_QUEUES = [{'exchange': 'direct', 'key': 'celery', 'name': 'celery'}, {'exchange': 'direct', 'key': 'extract', 'name': 'extract'}, {'exchange': 'direct', 'key': 'extract_sync', 'name': 'extract_sync'}]
extract.celery.CELERY_RESULT_BACKEND = amqp
extract.celery.CELERY_TASK_RESULT_EXPIRES = 18000
extract.celery_timeout = 30
extract.cleanup.schedule.cron.day = last
extract.gpg.homedir = ../../edware/config/gpg
extract.gpg.keyserver = None
extract.gpg.public_key.cat = kswimberly@amplify.com
extract.job.queue.archive = extract_archive
extract.job.queue.async = extract
extract.job.queue.sync = extract_sync
extract.retries_allowed = 1
extract.retry_delay = 60
extract.sftp.route.base_dir = route
extract.work_zone_base_dir = /tmp
ldap.base.dn = ou=environment,dc=edwdc,dc=net
migrate.broadcast.queue = edmigrate_slaves
migrate.celery.BROKER_URL = amqp://edware:edware1234@edwappsrv1.qa.dum.edwdc.net/edmigrate
migrate.celery.CELERYBEAT_SCHEDULE = [{'task': 'task.edmigrate.master.prepare_edware_data_refresh', 'name': 'prepare-migration', 'min': 0, 'schedule': 'cron', 'hour': 1}, {'task': 'task.edmigrate.master.start_edware_data_refresh', 'name': 'start-migration', 'min': 10, 'schedule': 'cron', 'hour': 1}]
migrate.celery.CELERYD_CONCURRENCY = 1
migrate.celery.CELERY_DEFAULT_EXCHANGE_TYPE = direct
migrate.celery.CELERY_DEFAULT_QUEUE = edmigrate_master
migrate.celery.CELERY_DEFAULT_ROUTING_KEY = edmigrate
migrate.celery.CELERY_IMPORTS = ('edmigrate.tasks.master', 'edmigrate.tasks.slave', 'edmigrate.tasks.nodes')
migrate.celery.CELERY_QUEUES = [{'exchange': 'direct', 'key': 'edmigrate_master', 'name': 'edmigrate_master'}, {'exchange': 'fanout', 'key': '', 'name': 'edmigrate_slaves'}]
migrate.celery.CELERY_RESULT_BACKEND = amqp
migrate.celery.CELERY_TASK_RESULT_EXPIRES = 18000
migrate.lag_tolerence_in_bytes = 10
migrate.master_scheduler.hour = 1
migrate.master_scheduler.min = 0
migrate.pgpool.hostname = dwrouter1.qa.dum.edwdc.net
migrate.replication.group = A
migrate.retries_allowed = 5
migrate.retry_delay = 5
migrate.timeout = 30
mode = dev
pdf.always_generate = False
pdf.base.url = http://localhost:6543/assets/html/
pdf.batch.job.queue = batch_pdf_gen
pdf.celery_timeout = 30
pdf.generate_timeout = 10
pdf.health_check.job.queue = health_check
pdf.minimum_file_size = 59000
pdf.report_base_dir = /tmp/pdf
pdf.retries_allowed = 1
pdf.retry_delay = 0
pickup.gatekeeper.cat = kswimberly
pickup.gatekeeper.dog = skong
pickup.sftp.hostname = edwappsrv5.poc.dum.edwdc.net
pickup.sftp.private_key_file = /var/lib/jenkins/.ssh/id_rsa
pickup.sftp.user = filerouter
pyramid.debug_all = False
pyramid.debug_authorization = False
pyramid.debug_notfound = False
pyramid.debug_routematch = False
pyramid.default_locale_name = en
pyramid.includes = pyramid_tm pyramid_exclog pyramid_beaker
pyramid.reload_templates = True
run.npm.update = True
services.celery.BROKER_URL = amqp://edware:edware1234@edwappsrv1.poc.dum.edwdc.net/edextract
services.celery.CELERYD_CONCURRENCY = 20
services.celery.CELERY_DEFAULT_EXCHANGE_TYPE = direct
services.celery.CELERY_DEFAULT_QUEUE = celery
services.celery.CELERY_DEFAULT_ROUTING_KEY = celery
services.celery.CELERY_IMPORTS = ('services.tasks.pdf',)
services.celery.CELERY_QUEUES = [{'exchange': 'direct', 'key': 'celery', 'name': 'celery'}, {'exchange': 'direct,', 'key': 'batch_pdf_gen', 'name': 'batch_pdf_gen'}, {'exchange': 'direct', 'key': 'batch_worker', 'name': 'batch_worker'}, {'exchange': 'direct', 'key': 'health_check', 'name': 'health_check'}]
services.celery.CELERY_RESULT_BACKEND = amqp
services.celery.CELERY_TASK_RESULT_EXPIRES = 18000
sftp.jail.base_path = /sftp
smarter.PATH = /usr/local/bin
smarter.resources.static.max_age = 3600
trigger.pdf.enable = False
trigger.pdf.schedule.cron.day = */1
trigger.recache.enable = False
trigger.recache.filter.file = ../config/comparing_populations_precache_filters.json
trigger.recache.schedule.cron.day = */1
use = egg:smarter
[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
[formatter_json]
class = edapi.logging.JsonDictLoggingFormatter
format = %(asctime)s %(message)s
[formatters]
keys = generic, json
[handler_audit]
args = ('/tmp/audit.log','midnight')
class = logging.handlers.TimedRotatingFileHandler
formatter = json
level = INFO
[handler_console]
args = (sys.stderr,)
class = StreamHandler
formatter = generic
level = NOTSET
[handler_filelog]
args = ('/tmp/smarter.log','midnight')
class = logging.handlers.TimedRotatingFileHandler
formatter = generic
level = INFO
[handler_security_event]
args = ('/tmp/security_event.log','midnight')
class = logging.handlers.TimedRotatingFileHandler
formatter = json
level = INFO
[handlers]
keys = console, filelog, audit, security_event
[logger_audit]
handlers = audit
level = INFO
propagate = 0
qualname = audit
[logger_edauth]
handlers = filelog
level = DEBUG
qualname = edauth
[logger_exc_logger]
handlers = filelog
level = ERROR
qualname = exc_logger
[logger_root]
handlers = filelog, console
level = INFO
[logger_security_event]
handlers = security_event
level = INFO
propagate = 0
qualname = security_event
[logger_smarter]
handlers = filelog
level = INFO
qualname = smarter
[logger_sqlalchemy]
handlers = filelog
level = WARN
qualname = sqlalchemy
[loggers]
keys = root, smarter, sqlalchemy, exc_logger, audit, edauth, security_event
[server:main]
host = 0.0.0.0
port = 6543
use = egg:waitress#main
