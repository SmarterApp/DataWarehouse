-----------------------------------
  Edware Spike Server Cheet Sheet
-----------------------------------
To access the Edware Spike server via ssh, log in with these creds.

ssh [your wgen username]@monetdb1.poc.dum.edwdc.net
password: [your wgen password]

-----------
Postgres 
-----------
Most people will only need to browse the edware database on monetdb1.poc.dum.edwdc.net. To do this, you should download and install pgadminIII.

http://www.pgadmin.org/

To configure a remote connection, use these parameters.

Host: monetdb1.poc.dum.edwdc.net
Maintenence DB: edware
Username: edware
Password: edware

If you can't connect, send me your IP, I will have to add your subnet into postgres security.

There is no local security on the postgres db, so if you are daring and like the commandline, you can log into the server directly via ssh, then you can access the database on the command line using the following incantation...

psql -Uedware edware

Once you get a prompt...

edware=#

execute...

edware=# \?

To get help with psql.

Relative to the work I did on the spike, the most current project directory is.

cd /home/jbecker/workspace/spike/pg921/edware/

Most of the interesting files live in edware/data.

I stored the benchmark queries in edware/sql.

The structure of the ddl files is fairly consistent with how I would like to see it done on the real project, with create table statements seperate from key creation, and a seperate drop script to be used if we want to blow it all away and start over again.

I created an edware_lz schema which has the same structure as the RPT clone, albeit with all of the columns as varchar to avoid casting issues on load.

The data goes from files to the landing zone via the data/rpt_fqa_load.sql script.

Then the data in the "_lz" schema is moved into the reporting schema via the data/rpt_fql_elt.sql script.

The basic benchmark queries are found in a file called sql/rudd.sql.

The working version of the comparing populations query is found in sql/rudd_q4_pg.sql.

The spike is done, Monet failed to support our needs in the way rpt is currently coded, Postgres, while slow, worked and thus won.

If you are curious and have questions while poking around, please ask.

---------
Monetdb
---------
The MonetDBD is running so you should be able to access it via...

mclient -uedware -dedware
password: edware

If you need to start | stop the server run this.

monetdbd [start | stop] /opt/edware/monetdb/data/

If you want to load data, you will have to be the monetdb user, connect like this.

mclient -umonetdb -dedware
password: monetdb

---------
Vertica
---------
Structurally and datawise, our Edware Postgres Instance is identitical to the vertical fqa environment. To compare results of queries on both platforms, you can run queries against vertical the same as you run them against postgres to check for data consistency and performance. Since I am a big fan of the command line, and vsql is pretty much the same as psql, I recommend being adventurous and giving the Vertica CLI interface a whirl.

You will need to install the vsql client, but once it is installed, you should be able to connect to the RPT future qa environment with the following command.

vsql -Udevel_ro -hservice-vertica-futureqa.mc.wgenhq.net 

Please see the getting started page for more information.

https://twiki.wgenhq.net/bin/view/DBA/GettingStarted

The RPT load test query repo.

http://repository.wgenhq.net/trac/RPT/browser/trunk/loadtest/vertica/queries

The RPT query naming convention cypher

The queries have a naming convention like this :
 
Cp – comparing populations
G stands for by grade
Sch for school
Sg – for school groups i.e. district
Account – It’s higher level than schoo.
 
If the first letter is g then it stands for growth.
Pmf stand for progress monitor fidelity
 
So g_g_sg.sql stands for growth report by grade and school group.

I will tidy this up into a proper readme file asap, but this is the gist of it.

~jj
